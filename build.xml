<?xml version="1.0" encoding="UTF-8"?>
<!-- ======================================================================
     May 11, 2011 8:51:22 AM

     WabashLineANTAPL
     build scripts for android project library

     FredGrott
     ====================================================================== -->
<project name="WabashLineANTAPL" basedir="." default="">
    <description>
            build scripts for android project library
    </description>

	<!-- The local.properties file is created and updated by the 'android'
		     tool.
		     It contains the path to the SDK. It should *NOT* be checked into
		     Version Control Systems. -->
		    <property file="local.properties" />

		    <!-- The build.properties file can be created by you and is never touched
		         by the 'android' tool. This is the place to change some of the
		         default property values used by the Ant rules.
		         Here are some properties you may want to change/update:

		         source.dir
		             The name of the source directory. Default is 'src'.
		         out.dir
		             The name of the output directory. Default is 'bin'.

		         Properties related to the SDK location or the project target should
		         be updated using the 'android' tool with the 'update' action.

		         This file is an integral part of the build system for your
		         application and should be checked into Version Control Systems.

		         -->
		    <property file="build.properties" />

		    <!-- The default.properties file is created and updated by the 'android'
		         tool, as well as ADT.
		         This file is an integral part of the build system for your
		         application and should be checked into Version Control Systems. -->
		    <property file="default.properties" />


		    <!-- Required pre-setup import -->
		    <import file="${sdk.dir}/tools/ant/pre_setup.xml" />


		<!-- extension targets. Uncomment the ones where you want to do custom work
		     in between standard targets -->
		<!--
		    <target name="-pre-build">
		    </target>
		    <target name="-pre-compile">
		    </target>

		    [This is typically used for code obfuscation.
		     Compiled code location: ${out.classes.absolute.dir}
		     If this is not done in place, override ${out.dex.input.absolute.dir}]
		    <target name="-post-compile">
		    </target>
		-->

		    <!-- Execute the Android Setup task that will setup some properties
		         specific to the target, and import the build rules files.

		         The rules file is imported from
		            <SDK>/tools/ant/
		         Depending on the project type it can be either:
		         - main_rules.xml
		         - lib_rules.xml
		         - test_rules.xml

		         To customize existing targets, there are two options:
		         - Customize only one target:
		             - copy/paste the target into this file, *before* the
		               <setup> task.
		             - customize it to your needs.
		         - Customize the whole script.
		             - copy/paste the content of the rules files (minus the top node)
		               into this file, *after* the <setup> task
		             - disable the import of the rules by changing the setup task
		               below to <setup import="false" />.
		             - customize to your needs.
		    -->
		    <setup import="false"/>


	<!--
	        This rules file is meant to be imported by the custom Ant task:
	            com.android.ant.SetupTask

	        The following properties are put in place by the importing task:
	            android.jar, android.aidl, aapt, aidl, and dx

	        Additionnaly, the task sets up the following classpath reference:
	            android.target.classpath
	        This is used by the compiler task as the boot classpath.
	    -->

	    <!-- Custom tasks -->
	    <taskdef name="aapt"
	        classname="com.android.ant.AaptExecLoopTask"
	        classpathref="android.antlibs" />

	    <taskdef name="aidl"
	        classname="com.android.ant.AidlExecTask"
	        classpathref="android.antlibs" />

	    <taskdef name="xpath"
	        classname="com.android.ant.XPathTask"
	        classpathref="android.antlibs" />

	    <taskdef name="if"
	        classname="com.android.ant.IfElseTask"
	        classpathref="android.antlibs" />

	    <!-- Properties -->

	    <property name="android.tools.dir" location="${sdk.dir}/tools" />
	    <!-- Name of the application package extracted from manifest file -->
	    <xpath input="AndroidManifest.xml" expression="/manifest/@package"
	                output="manifest.package" />
	    <xpath input="AndroidManifest.xml" expression="/manifest/application/@android:hasCode"
	                output="manifest.hasCode" default="true"/>

	    <!-- Input directories -->
	    <property name="source.dir" value="src" />
	    <property name="source.absolute.dir" location="${source.dir}" />
	    <property name="gen.dir" value="gen" />
	    <property name="gen.absolute.dir" location="${gen.dir}" />
	    <property name="resource.dir" value="res" />
	    <property name="resource.absolute.dir" location="${resource.dir}" />
	    <property name="asset.dir" value="assets" />
	    <property name="asset.absolute.dir" location="${asset.dir}" />

	    <!-- Directory for the third party java libraries -->
	    <property name="external.libs.dir" value="libs" />
	    <property name="external.libs.absolute.dir" location="${external.libs.dir}" />
	    <!-- Directory for the native libraries -->
	    <property name="native.libs.dir" value="libs" />
	    <property name="native.libs.absolute.dir" location="${native.libs.dir}" />

	    <!-- Output directories -->
	    <property name="out.dir" value="bin" />
	    <property name="out.absolute.dir" location="${out.dir}" />
	    <property name="out.classes.dir" value="${out.absolute.dir}/classes" />
	    <property name="out.classes.absolute.dir" location="${out.classes.dir}" />

	    <!-- compilation options -->
	    <property name="java.encoding" value="UTF-8" />
	    <property name="java.target" value="1.5" />
	    <property name="java.source" value="1.5" />

	    <!-- Verbosity -->
	    <property name="verbose" value="false" />
	    <!-- This is needed by emma as it uses multilevel verbosity instead of simple 'true' or 'false'
	         The property 'verbosity' is not user configurable and depends exclusively on 'verbose'
	         value.-->
	    <condition property="verbosity" value="verbose" else="quiet">
	        <istrue value="${verbose}" />
	    </condition>

	    <!-- Tools -->
	    <condition property="exe" value=".exe" else=""><os family="windows" /></condition>

	    <!-- Emma configuration -->
	    <property name="emma.dir" value="${sdk.dir}/tools/lib" />
	        <path id="emma.lib">
	            <pathelement location="${emma.dir}/emma.jar" />
	            <pathelement location="${emma.dir}/emma_ant.jar" />
	        </path>
	    <taskdef resource="emma_ant.properties" classpathref="emma.lib" />
	    <!-- End of emma configuration -->

	    <!-- Rules -->

	    <!-- Creates the output directories if they don't exist yet. -->
	    <target name="-dirs">
	        <echo>Creating output directories if needed...</echo>
	        <mkdir dir="${resource.absolute.dir}" />
	        <mkdir dir="${external.libs.absolute.dir}" />
	        <mkdir dir="${gen.absolute.dir}" />
	        <mkdir dir="${out.absolute.dir}" />
	        <mkdir dir="${out.classes.absolute.dir}" />
	    </target>

	    <!-- empty default pre-build target. Create a similar target in
	         your build.xml and it'll be called instead of this one. -->
	    <target name="-pre-build"/>

	    <!-- Generates the R.java file for this project's resources. -->
	    <target name="-resource-src" depends="-dirs, -pre-build">
	        <echo>Generating R.java / Manifest.java from the resources...</echo>
	        <aapt executable="${aapt}"
	                command="package"
	                verbose="${verbose}"
	                manifest="AndroidManifest.xml"
	                androidjar="${android.jar}"
	                rfolder="${gen.absolute.dir}">
	            <res path="${resource.absolute.dir}" />
	        </aapt>
	    </target>

	    <!-- Generates java classes from .aidl files. -->
	    <target name="-aidl" depends="-dirs">
	        <if condition="${manifest.hasCode}">
	            <then>
	                <echo>Compiling aidl files into Java classes...</echo>
	                <aidl executable="${aidl}" framework="${android.aidl}"
	                        genFolder="${gen.absolute.dir}">
	                    <source path="${source.absolute.dir}"/>
	                    <source refid="android.libraries.src"/>
	                </aidl>
	            </then>
	            <else>
	                <echo>hasCode = false. Skipping...</echo>
	            </else>
	        </if>
	    </target>

	    <!-- empty default pre-compile target. Create a similar target in
	         your build.xml and it'll be called instead of this one. -->
	    <target name="-pre-compile"/>

	    <!-- Compiles this project's .java files into .class files. -->
	    <target name="compile" depends="-resource-src, -aidl, -pre-compile"
	                description="Compiles project's .java files into .class files">
	        <!-- If android rules are used for a test project, its classpath should include
	             tested project's location -->
	        <condition property="extensible.classpath"
	                           value="${tested.project.absolute.dir}/bin/classes" else=".">
	            <isset property="tested.project.absolute.dir" />
	        </condition>
	        <condition property="extensible.libs.classpath"
	                value="${tested.project.absolute.dir}/libs"
	                else="./libs">
	            <isset property="tested.project.absolute.dir" />
	        </condition>
	        <javac encoding="${java.encoding}"
	                source="${java.source}" target="${java.target}"
	                debug="true" extdirs=""
	                destdir="${out.classes.absolute.dir}"
	                bootclasspathref="android.target.classpath"
	                verbose="${verbose}"
	                classpath="${extensible.classpath}"
	                classpathref="android.libraries.jars">
	            <src path="${source.absolute.dir}" />
	            <src path="${gen.absolute.dir}" />
	            <src refid="android.libraries.src" />
	            <classpath>
	                <fileset dir="${external.libs.absolute.dir}" includes="*.jar" />
	                <fileset dir="${extensible.libs.classpath}" includes="*.jar" />
	            </classpath>
	        </javac>

	    	<!-- post codeqa doc generation and codeqa checking subant
	    	     tasks go here. We only need PMD, checkstyle,
	    	      apiviz -->
	    	<subant target="-apl.checkstyle">
	    	                 <fileset dir="${basedir}" includes="build.xml"/>
	    	</subant>
	    	<subant target="-apl.pmd">
	    	                <fileset dir="${basedir}" includes="build.xml"/>
	    	</subant>
	    	<subant target="-apl.apivizdoclet">
	    	              <fileset dir="${basedir}" includes="build.xml"/>
	    	</subant>
	    </target>

	    <target name="clean" description="Removes output files created by other targets.">
	        <delete dir="${out.absolute.dir}" verbose="${verbose}" />
	        <delete dir="${gen.absolute.dir}" verbose="${verbose}" />
	    </target>

	    <target name="help">
	        <!-- displays starts at col 13
	              |13                                                              80| -->
	        <echo>Android Ant Build. Available targets:</echo>
	        <echo>   help:      Displays this help.</echo>
	        <echo>   clean:     Removes output files created by other targets.</echo>
	        <echo>   compile:   Compiles project's .java files into .class files.</echo>
	    </target>

	<!-- codeqa stuff, very much the same as in the projectapptest build.xml script
	     file. -->
	<property name="apl.build.dir" location="${basedir}/build"/>
	    <property name="apl.docs.dir" location="${apl.build.dir}/docs"/>
	    <mkdir dir="${apl.docs.dir}"/>
	    <property name="apl.javadoc.dir" location="${apl.docs.dir}/javadoc"/>
	    <property name="apl.javadoc.resources.dir"
	        location="${apl.javadoc.dir}/resources"/>
	    <mkdir dir="${apl.javadoc.resources.dir}"/>
	    <property name="apl.docs.images.dir" location="${apl.docs.dir}/images"/>
	    <mdkir dir="${apl.docs.images.dir}"/>
	    <property name="apl.docs.fonts.dir" location="${apl.docs.dir}/fonts"/>
	    <mkdir dir="${apl.docs.fonts.dir}"/>
	    <property name="apl.docs.css.dir" location="${apl.docs.dir}/css"/>
	    <mkdir dir="${apl.docs.css.dir}"/>
	    <property name="buildsystem.anttasklibs.dir"
	        location="${tested.project.dir}/buildsystem/anttasklibs"/>
	    <property name="buildsystem.codeqa.dir"
	        location="${tested.project.dir}/buildsystem/codeqa"/>
	    <property name="buildsystem.codeqa.images.dir"
	        location="${buildsystem.codeqa.dir}/images"/>
	    <property name="buildsystem.codeqa.css.dir"
	        location="${buildsystem.codeqa.dir}/css"/>
	    <property name="buildsystem.codeqa.fonts.dir"
	        location="${buildsystem.codeqa.dir}/fonts"/>
	    <property name="buildsystem.apiviz.loc"
	        location="${tested.project.dir}/buildsystem/apivizdoclet/apiviz-1.3.1.GA.jar"/>
	    <copy todir="${apl.docs.css.dir}">
	       <fileset dir="${buildsystem.codeqa.css.dir}" />
	    </copy>
	    <copy todir="${apl.docs.fonts.dir}">
	       <fileset dir="${buildsystem.codeqa.fonts.dir}"/>
	    </copy>
	    <copy todir="${apl.docs.images.dir}">
	       <fileset dir="${buildsystem.codeqa.images.dir}"/>
	    </copy>
	    <copy file="${buildsystem.codeqa.images.dir}/companylogo.png"
	                todir="${apl.javadoc.resources.dir}"/>
	    <path id="apl.anttasklibs.paths">
	        <fileset dir="${buildsystem.anttasklibs.dir}" includes="**/*.jar"/>
	    </path>
	    <taskdef name="pmd" classname="net.sourceforge.pmd.ant.PMDTask"
	             classpathref="apl.anttasklibs.paths"/>
	    <taskdef resource="checkstyletask.properties"
	             classpathref="apl.anttasklibs.paths"/>
	    <property name="apl.checkstyle.file"
	        location="${tested.project.dir}/buildsystem/codeqa/eclipse.checkstyle.android.xml"/>
	    <property name="apl.checkstyle.xsl.loc"
	        location="${tested.project.dir}/buildsystem/codeqa/xsls/checkstyle.xml"/>
	    <property name="apl.pmd.ruleset.file"
	        location="${tested.project.dir}/buildsystem/codeqa/ruleset.pmd.xml"/>
	    <property name="apl.pmd.xsl.loc"
	        location="${tested.project.dir}/buildsystem/codeqa/xsls/pmd.xsl"/>
	    <path id="apl.javadoc.source">
	                   <pathelement path="${source.absolute.dir}"/>
	                   <pathelement path="${gen.absolute.dir}"/>
	     </path>

	            <!-- Path needs to include both Android jars and
	                         3rd party library jars in libs
	                 Need to included tested.project
	                 classes to feed into javadoc task-->
	     <path id="apl.android.project.libs">
	                   <fileset dir="${native.libs.dir}">
	                            <include name="**/*.jar"/>
	                   </fileset>
	                   <path refid="android.target.classpath"/>
	                   <fileset dir="${tested.project.dir}/build/classes">
	                         <include name="**/*.class"/>
	                    </fileset>
	      </path>

	      <path id="apl.classes.classpath">
	                <fileset dir="build/classes">
	                    <include name="**/*.class"/>
	                </fileset>
	      </path>


	    <target name="-apl.checkstyle">
	            <checkstyle  config="${apl.checkstyle.file}"
	                                       failureProperty="checkstyle.failure"
	                                       failOnViolation="false">
	                                       <formatter type="xml"
	                                          tofile="${apl.docs.dir}/checkstyle.xml"/>
	                                       <fileset dir="${source.absolute.dir}" includes="**/*.java"/>
	                                       <classpath refid="apl.classes.classpath"/>
	                                       <property key="checkstyle.cache.file" file="${basedir}/cachefile"/>
	                                    </checkstyle>
	                                    <xslt basedir="${apl.docs.dir}" destdir="${apl.docs.dir}"
	                                          style="${apl.checkstyle.xsl.loc}">
	                                          <param name="project" expression="${ant.project.name}"/>
	                                          <param name="today" expression="${DSTAMP}"/>
	                                          <param name="company" expression="${company}"/>
	                                          <mapper type="glob" from="checkstyle.xml" to="checkstyle.html"/>
	                                    </xslt>
	        </target>
	    <target name="-apl.pmd">

	            <pmd rulesetfiles="${pmd.ruleset.file}">
	                                        <auxclasspath>
	                                           <path refid="android.target.classpath"/>
	                                           <pathelement location="${out.classes.absolute.dir}" />
	                                           <path refid="jar.libs.ref"/>
	                                        </auxclasspath>
	                                        <formatter type="xml" toFile="${apl.docs.dir}/pmd.xml"/>

	                                        <fileset dir="${source.absolute.dir}" includes="**/*.java" />
	                                    </pmd>
	                                    <xslt basedir="${apl.docs.dir}" destdir="${apl.docs.dir}"
	                                       style="${apl.pmd.xsl.loc}">
	                                       <param name="project" expression="${ant.project.name}"/>
	                                       <param name="today" expression="${DSTAMP}"/>
	                                       <param name="comnpany" expression="${company}"/>
	                                       <param name="rulesets" expression="androidrules"/>
	                                       <mapper type="glob" from="pmd.xml" to="pmd.html"/>
	                                    </xslt>
	        </target>
	    <target name="-apl.apivizdoclet">

	            <javadoc
	                            sourcepathref="apl.javadoc.source"
	                            destdir="${apl.javadoc.dir}"
	                            bootclasspathref="apl.android.project.libs"
	                            private="true"
	                            stylesheetfile="${javadoc.stylesheet}"
	                            linksource="true"
	                            linkoffline="${javadoc.linkoffline}"
	                            windowtitle="${ant.project.name}"
	                            additionalparam="-author  -version  -sourceclasspath ${out.classes.dir}">
	                            <!-- Use a nice documentation title -->
	                            <doctitle>
	                                ${ant.project.name}&lt;/br>
	                                API Specification
	                            </doctitle>
	                            <!-- Create a header that contains the taglets logo -->
	                            <!-- Note the use of the {@docRoot} tag to link to the logo -->
	                            <header>
	                                &lt;img
	                                src=&quot;{@docRoot}/resources/companylogo.png&quot;
	                                width=&quot;88&quot; height=&quot;40&quot; border=&quot;0&quot;
	                                &gt;
	                            </header>
	                            <!-- Same for the footer -->
	                            <footer>
	                                &lt;img
	                                src=&quot;{@docRoot}/resources/companylogo.png&quot;
	                                width=&quot;88&quot; height=&quot;40&quot;
	                                &gt;
	                            </footer>
	                            <!-- Include a timestamp at the bottom of the docu generated -->
	                            <!-- Note the use of ${timestamp} which was created by the -->
	                            <!-- <tstamp> task at the start of this target -->
	                            <bottom>
	                                &lt;p align=&quot;right&quot;&gt;
	                                &lt;font class=&quot;NavBarFont1&quot; size=&quot;-1&quot;&gt;
	                                Android SDK API Target ${target}&lt;br&gt;
	                                ${ant.project.name}&lt;br&gt;
	                                API Spec&lt;br&gt;
	                                ${TSTAMP} ${DSTAMP}
	                                &lt;/font&gt;
	                                &lt;/p&gt;
	                            </bottom>
	                            <doclet name="org.jboss.apiviz.APIviz"
	                                path="${buildsystem.apiviz.loc}">
	                            </doclet>
	                    </javadoc>

	        </target>

</project>
